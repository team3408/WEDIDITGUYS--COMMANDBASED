// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "../Commands/DefaultAngleClimb.h"
#include "ClimberAngle.h"
#include "../RobotMap.h"
#include "WPILib.h"
#include <math.h> // acos to find angle
#define PI 3.14159265
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ClimberAngle::ClimberAngle() : Subsystem("ClimberAngle") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	cANTalon2 = RobotMap::climberAngleCANTalon2;
	cANTalon1 = RobotMap::climberAngleCANTalon1;
	analogPotentiometer1 = RobotMap::climberAngleAnalogPotentiometer1;
	ARMLENGTH = 1; //filler number.  need to change
	ARMTOEDGE = 1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ClimberAngle::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new DefaultAngleClimb());
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void ClimberAngle::Move(float moveAnglePower){
	//sets the talons to the powers specified in the command
	cANTalon2->Set(moveAnglePower);
	cANTalon1->Set(-moveAnglePower);
}

float ClimberAngle::GetAngle(){
	float stringLength = analogPotentiometer1->Get();// gets the length in inche
	//Finds angle of Potentiometer using Pythag Thm and Trig
	float angle = acos(( this->ARMLENGTH * ARMLENGTH + ARMTOEDGE * ARMTOEDGE - stringLength * stringLength)/(2.0 * ARMLENGTH * ARMTOEDGE)) * (180.0 / PI);
	//returns the angle of the potentiometer.
	return angle;
}
