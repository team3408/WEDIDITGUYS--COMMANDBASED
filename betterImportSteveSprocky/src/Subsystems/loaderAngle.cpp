// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "WPILib.h"
#include "loaderAngle.h"
#include "../Commands/DefaultAngleLoader.h"// This fixes the cant find thing error
#include "../RobotMap.h"
#include "WPILib.h"
#define PI 3.14159265

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

LoaderAngle::LoaderAngle() : Subsystem("loaderAngle") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	angle = RobotMap::loaderAngleangle;
	angle2 = RobotMap::loaderAngleangle2;

	angle->ConfigNeutralMode(CANSpeedController::kNeutralMode_Brake);
	angle2->ConfigNeutralMode(CANSpeedController::kNeutralMode_Brake);
	analogPotentiometer1 = RobotMap::loaderAngleAnalogPotentiometer1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	this->ARMLENGTH = 20;//needs to be changed
	this->ARMTOEDGE = 20;//needs to be changed

}
    
void LoaderAngle::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new DefaultAngleLoader());
}

void LoaderAngle::Move(float value) {
	angle->Set(value);
	angle2->Set(-value);//
}


float LoaderAngle::GetAngle(){
	double rotationalAngle = analogPotentiometer1->Get();// gets the length in inche
	//Finds angle of Potentiometer using Pythag Thm and Trig
	//returns the angle of the potentiometer.
	double LoaderAngleOffset = 0.0;
	rotationalAngle = rotationalAngle + LoaderAngleOffset;
	rotationalAngle = fmod(rotationalAngle ,360.0);
	return rotationalAngle;
}

void LoaderAngle::Stop() {
	angle->Set(0);
	angle2->Set(0);
}

void LoaderAngle::DisplayValue(){
	SmartDashboard::PutNumber("LOADER loader angle1 voltage",angle->GetOutputVoltage());
	SmartDashboard::PutNumber("LOADER loader angle1 current output",angle->GetOutputCurrent());
	SmartDashboard::PutNumber("LOADER loader angle2 voltage",angle2->GetOutputVoltage());
	SmartDashboard::PutNumber("LOADER loader angle2 current output",angle2->GetOutputCurrent());
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

