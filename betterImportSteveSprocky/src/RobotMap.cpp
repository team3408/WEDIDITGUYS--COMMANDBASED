// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANTalon* RobotMap::loaderSpinSpin = NULL;
CANTalon* RobotMap::driveCANTalon1 = NULL;
CANTalon* RobotMap::driveCANTalon2 = NULL;
CANTalon* RobotMap::driveCANTalon3 = NULL;
CANTalon* RobotMap::driveCANTalon4 = NULL;
Encoder* RobotMap::driveQuadratureEncoder1 = NULL;
Encoder* RobotMap::driveQuadratureEncoder2 = NULL;
AnalogInput* RobotMap::driveAnalogInput1 = NULL;
DoubleSolenoid* RobotMap::climberPneumaticsDoubleSolenoid2 = NULL;
DoubleSolenoid* RobotMap::climberPneumaticsDoubleSolenoid1 = NULL;
CANTalon* RobotMap::loaderAngleangle = NULL;
AnalogPotentiometer* RobotMap::loaderAngleAnalogPotentiometer1 = NULL;
CANTalon* RobotMap::shooterCANTalon1 = NULL;
CANTalon* RobotMap::climberAngleCANTalon2 = NULL;
CANTalon* RobotMap::climberAngleCANTalon1 = NULL;
AnalogPotentiometer* RobotMap::climberAngleAnalogPotentiometer1 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	loaderSpinSpin = new CANTalon(2);
	
	
	driveCANTalon1 = new CANTalon(4);
	
	
	driveCANTalon2 = new CANTalon(5);
	
	
	driveCANTalon3 = new CANTalon(6);
	
	
	driveCANTalon4 = new CANTalon(7);
	
	
	driveQuadratureEncoder1 = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drive", "Quadrature Encoder 1", driveQuadratureEncoder1);
	driveQuadratureEncoder1->SetDistancePerPulse(1.0);
        driveQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
	driveQuadratureEncoder2 = new Encoder(3, 4, false, Encoder::k4X);
	lw->AddSensor("Drive", "Quadrature Encoder 2", driveQuadratureEncoder2);
	driveQuadratureEncoder2->SetDistancePerPulse(1.0);
        driveQuadratureEncoder2->SetPIDSourceParameter(Encoder::kRate);
	driveAnalogInput1 = new AnalogInput(0);
	lw->AddSensor("Drive", "Analog Input 1", driveAnalogInput1);
	
	climberPneumaticsDoubleSolenoid2 = new DoubleSolenoid(0, 2, 3);      
	lw->AddActuator("ClimberPneumatics", "Double Solenoid 2", climberPneumaticsDoubleSolenoid2);
	
	climberPneumaticsDoubleSolenoid1 = new DoubleSolenoid(0, 0, 1);      
	lw->AddActuator("ClimberPneumatics", "Double Solenoid 1", climberPneumaticsDoubleSolenoid1);
	
	loaderAngleangle = new CANTalon(3);
	
	
	loaderAngleAnalogPotentiometer1 = new AnalogPotentiometer(1, 1.0, 0.0);
	lw->AddSensor("loaderAngle", "Analog Potentiometer 1", loaderAngleAnalogPotentiometer1);
	
	shooterCANTalon1 = new CANTalon(10);
	
	
	climberAngleCANTalon2 = new CANTalon(9);
	
	
	climberAngleCANTalon1 = new CANTalon(8);
	
	
	climberAngleAnalogPotentiometer1 = new AnalogPotentiometer(2, 1.0, 0.0);
	lw->AddSensor("ClimberAngle", "Analog Potentiometer 1", climberAngleAnalogPotentiometer1);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
